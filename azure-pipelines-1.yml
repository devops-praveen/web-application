trigger:
- test12
stages:
  - stage: Build
    jobs:
    - job: Build
      pool: Linuxagent
        #vmImage: ubuntu-latest
      continueOnError: false
      steps:
      - script: ls -al && pwd
        displayName: 'files listing'
      - script: sudo apt install unzip
        displayName: 'unzip downloading' 

      - task: TerraformInstaller@0
        inputs:
          terraformVersion: 'latest'
      
      - task: TerraformTaskV3@3
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'tf-deploy'
          backendAzureRmResourceGroupName: 'test-rg'
          backendAzureRmStorageAccountName: 'tfbackup'
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: 'terraform.tfstate'

      - task: TerraformTaskV3@3
        displayName: 'terraform validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
      - task: TerraformTaskV3@3
        displayName: 'terraform plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          environmentServiceNameAzureRM: 'tf-deploy'
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifactName: 'drop'
          publishLocation: 'pipeline'
  - stage: deploy
    dependsOn: 'build'
    jobs:
    - job: deploy
      pool: Linuxagent
       #vmImage: ubuntu-latest
      steps:

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'drop'
          targetPath: '$(Pipeline.Workspace)'
      - script: sudo apt install unzip
        displayName: 'unzip downloading'
      - task: TerraformInstaller@0
        displayName: 'terraform install'
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV3@3
        displayName: 'terraform apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          environmentServiceNameAzureRM: 'tf-deploy'